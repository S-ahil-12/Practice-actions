name: Test deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js (Node.js 20)
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Setup Angular CLI
        run: npm install -g @angular/cli --force

      - name: Install project dependencies
        run: npm install --force

      - name: Build frontend
        run: npm run build  # Or your build command

      - name: Build Docker image (secure Docker credentials)
        run: docker build -t ${{ secrets.TEST_DOCKER_USERNAME }}/test .
        env:
          DOCKER_USERNAME: ${{ secrets.TEST_DOCKER_USERNAME }}

      - name: Login to Docker Hub (securely using a login action)
        uses: docker/login-action@v2  # Use a dedicated action for better security
        with:
          username: ${{ secrets.TEST_DOCKER_USERNAME }}
          password: ${{ secrets.TEST_DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.TEST_DOCKER_USERNAME }}/test

      - name: SSH to Instance (**WARNING: INSECURE!)**
        env:
          HOSTNAME: ${{ secrets.TEST_SSH_HOST }}
          USER_NAME: ${{ secrets.TEST_USER_NAME }}
        run: |
          echo "${{ secrets.TEST_SSH_PRIVATEKEY }}" > my-ssh-key.pem
          chmod 400 my-ssh-key.pem
          ssh -o StrictHostKeyChecking=no -i my-ssh-key.pem $USER_NAME@${HOSTNAME} '  # **Exposing private key is insecure!**
            sudo docker login -u ${{ secrets.TEST_DOCKER_USERNAME }} -p ${{ secrets.TEST_DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.TEST_DOCKER_USERNAME }}/test
            echo "Hello github"
            UNIQUE_ID=$(date +%s)
            CONTAINER_NAME="uppo-frontend-${UNIQUE_ID}"
            echo "Starting Docker container..."
            sudo docker run -d --name $CONTAINER_NAME -p 80:80 ${{ secrets.TEST_DOCKER_USERNAME }}/uppo-frontend
            echo "Docker frontend container started......."
          '
          rm my-ssh-key.pem  # Remove temporary key file

